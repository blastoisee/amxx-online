let files = null;
let editors = [];


const initEditor = ()=>{

    const editor = CodeMirror(document.querySelector('#editor'), {
        lineNumbers: true,
        tabSize: 2,
        mode: 'perl',
        theme: 'duothone-light',
        value: 
`/* Plugin generated by AMXX-Online */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"


public plugin_init() {
    register_plugin(PLUGIN, VERSION, AUTHOR)
    
    // Add your code here...
}`

    });

    editor.on('change', evt =>{
        console.log(evt.getValue())
    })

}

const checkUrl = () =>{

    const location = window.location.pathname;

    const element = document.getElementById(location);

    element.classList.add("active");

}

const includeCheck = () =>{

    document.getElementById('incFile').onchange = function() {

        $('.incCacheButton').show();

        files = this.files;
   
    };
}

const saveIncCache = () =>{

    document.getElementsByClassName('incCacheButton')[0].onclick = function(){

        if (files.length === 0) {
            console.log('No file is selected');
            return;
        }
    
        var reader = new FileReader();

        reader.onload = function(event) {

            const fileName = $('#incFile').val().split('\\').pop();

            const cachedInc = {
                "type": "includeCached",
                "value": event.target.result,
                "name": fileName,
                "active": true
            };

            localStorage.setItem(fileName, JSON.stringify(cachedInc));

            $('.incCacheButton').hide();

            const length = Object.keys({...localStorage}).length;

            const index = length === 0 ? 0 : length + 1;

            $("#cachedIncList").append(`<span class="incItem" id="inc-${index}">${fileName}<button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="removeCachedInc(${index});"><span aria-hidden="true">&times;</span></button></span>`);

            createMessage(`Include <b>${fileName} is succesfully cached.`, 'success')

        };

        reader.readAsText(files[0]);
    }
}

const checkAlreadyCachedInc = () =>{

    const items = { ...localStorage };

    const length = Object.keys(items).length;
    const values = Object.values(items);

    for (let i = 0; i < length; i++) {

        const include = JSON.parse(values[i]);

        console.log(JSON.parse(values[i]))

        if(include.name.includes('.inc')){
            $("#cachedIncList").append(`<span class="incItem" id="inc-${i}">${include.name}<button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="removeCachedInc(${i});"><span aria-hidden="true">&times;</span></button></span>`);
        }
       
    }
}

const removeCachedInc = (id) =>{

    const items = { ...localStorage };

    const key = Object.keys(items)[id];

    localStorage.removeItem(key)

    $(`#inc-${id}`).remove();
}

const createMessage = (msg, type, time = 5000) =>{

    $('.messages').append(`
        <div class="alert alert-${type} push-big" role="alert">
            ${msg}
        </div>
    `);

    setTimeout(()=>{
        $('.messages div').remove();
    }, time);
    
}

const openNewPluginEditor = () =>{

    document.getElementById('openEditorInput').onclick = function(){

        $('#createNewInput').hide();

        $('#newFileModal').modal('show');
       
    }

    document.getElementById('saveNewFile').onclick = function() {

        const newFileName = $("#newFileName").val().replace(/ /g, "-");

        if(!newFileName){

            $('#newFileModal').modal('hide');

            return createMessage('File name is not good.', 'danger');

        }

        if(newFileName.match(/.inc/)){
            return generateNewEditor(newFileName)
        } 

        if(newFileName.match(/.sma/)){
            return generateNewEditor(newFileName)
        }else{
            console.log('need to add sma suffixs')
        }

        console.log(newFileName)



    }

    $('#newFileModal').on('hidden.bs.modal', function (e) {
        $('#createNewInput').show();
    })
   

}

const generateNewEditor = (fileName) =>{

    const tabName =  fileName.replace(/\./g, "-");

    $("#editorsList .nav-item:last").before(`<li class="nav-item">
                                                <a class="nav-link" id="${fileName}-tab" data-toggle="tab" role="tab" aria-controls="${tabName}-panel" aria-selected="false" href="#${tabName}">${fileName}</a>
                                            </li>`);

    $(".tab-content").append(`<div class="tab-pane" id="${tabName}" role="tabpanel" aria-labelledby="${fileName}-tab">editor new ${fileName}</div>`);
    
    $('#newFileModal').modal('hide');

    $(`#editorsList a[href="#${fileName}"]`).click();

    //$(`.nav-tabs li:nth-child(${fileName}) a`).click();
}

window.onload = () =>{
    initEditor();
    checkUrl();
    includeCheck();
    saveIncCache();
    checkAlreadyCachedInc();
    openNewPluginEditor();
}

