const EventEmitter = require("events");
const crypto = require("crypto");
const fs = require('fs');

const config = require('../../config.json');


class AMXX extends EventEmitter{

    constructor(){
        super();

        this.config = config;
       


    }

    /*
        processInclude(includes: array)

        parsed_name - parsed filename with id
        include_value - all includes what needs to be proccessed
        version - amx version

        Process includes into specific version of amx includes 

    */

    processInclude(name, include_value, version){

        

        if(this.createFileFromString(name, include_value)){

        }else{
            throw 'There was problem with saving include files.'
        } 
    }

    /*
        filePathGenerator(id: string, filename: string)

        id - random id generated by function 
        filename - specific filename with extension

        Returns parsed name of file and id

    */  
   
    filePathGenerator(id, filename){
        return `${id}_${filename}`;
    }
  
    /*
        createFileFromString(name: string, string: string)

        name - filepath with filename and file suffix
        string - actual value of file

        Creates a new file in a specific directory, returns true on succesfull task or 
        false on unseccesfull task.

    */

    createFileFromString(name, string){  

        fs.writeFile(name, string, (err) =>{   
            return !err ? true : false;
        });

    }

    /*
        generateUniqueID()

        Generates random string using crypto module

    */

    generateUniqueID(){
        return crypto.randomBytes(20).toString('hex');
    }

    
}



module.exports = AMXX;